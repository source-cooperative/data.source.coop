name: Deploy to Prod

on:
  release:
    types: [published, deleted]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: production
  cancel-in-progress: false

jobs:
  deploy-proxy:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - id: latest
        uses: thebritican/fetch-latest-release@a36ee8ee464da77ba3e499ed6b75e3530e10f9bc # v2.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
        with:
          ref: ${{ steps.latest.outputs.tag_name }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-west-2
          role-to-assume: ${{ vars.DEPLOY_ROLE_ARN }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: source-data-proxy
          IMAGE_TAG: ${{ steps.latest.outputs.tag_name }}
        run: |
          docker buildx build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --push .
      - name: Render Amazon ECS task definition
        id: render-data-proxy-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition-family: source-data-proxy
          container-name: source-data-proxy
          image: 417712557820.dkr.ecr.us-west-2.amazonaws.com/source-data-proxy:${{ steps.latest.outputs.tag_name }}
      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-data-proxy-container.outputs.task-definition }}
          service: source-data-proxy
          cluster: SourceCooperative-Prod

  deploy-cdk:
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: ./deploy
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.DEPLOY_ROLE_ARN }}
      - uses: actions/setup-node@v4.4.0
        with:
          node-version: 22
          cache: npm
          cache-dependency-path: ./deploy/package-lock.json
      - run: npm install -g aws-cdk
      - run: npm ci
      - name: Set vars to env
        env:
          VARS_JSON: ${{ toJSON(vars) }}
        run: |
          echo "$VARS_JSON" | jq -r 'keys[] as $k | "\($k)=\(.[$k])"' >> $GITHUB_ENV
      - run: cdk deploy --all --require-approval never
        env:
          STAGE: prod
